#ifndef ITERATOR_TRAITS_HPP
# define ITERATOR_TRAITS_HPP

#include <iterator>
#include <iostream>

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//***ITERATOR TRAITS CLASS***//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ft
{
	template<
		class Category,
		class T,
		class Distance = std::ptrdiff_t,
		class Pointer = T*,
		class Reference = T&
	>
	//std::iterator is base class provided to simplify definitions of the required types for iterators
	struct iterator {
		typedef		Category		iterator_category
		typedef		T				value_type
		typedef		Distance		difference_type
		typedef		Pointer			pointer
		typedef		Reference		reference
	};

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//***ITERATOR TRIATS***//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<class Iterator>
	struct iterator_traits {
		typedef 
	};

	template<typename T>
	struct iterator_traits<T*> {

	};

	template <typename T>
	struct iterator_traits<const T*> {

	};
	

}






#endif