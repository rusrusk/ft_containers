#ifndef ITERATOR_TRAITS_HPP
# define ITERATOR_TRAITS_HPP

#include <iterator>
#include <iostream>

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//***ITERATOR TRAITS CLASS***//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace ft
{
	template<
		class Category,
		class T,
		class Distance = std::ptrdiff_t,
		class Pointer = T*,
		class Reference = T&
	>
	//std::iterator is base class provided to simplify definitions of the required types for iterators
	struct iterator {
		typedef		Category		iterator_category;
		typedef		T				value_type;
		typedef		Distance		difference_type;
		typedef		Pointer			pointer;
		typedef		Reference		reference;
	};

	//ITERATOR CATEGORIES/TAGS. Each tag is an empty type
	struct input_iterator_tag{};
	struct output_iterator_tag {};
	struct forward_iterator_tag : public input_iterator_tag {};
	struct bidirectional_iterator_tag : public forward_iterator_tag {};
	struct random_access_iterator_tag : public bidirectional_iterator_tag {};

	

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//***ITERATOR TRAITS***//////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<class Iterator>
	struct iterator_traits {
		typedef typename Iterator::difference_type			difference_type;
		typedef typename Iterator::value_type				value_type;
		typedef typename Iterator::pointer					pointer;
		typedef typename Iterator::reference				reference;
		typedef typename Iterator::iterator_category		iterator_category;

	};


	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	//***ITERATOR TRAITS SPECIALIZATION***///////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<typename T>
	struct iterator_traits<T*> {
		typedef		ptrdiff_t						difference_type;
		typedef 	T								value_type;
		typedef		T*								pointer;
		typedef		T&								reference;
		typedef		random_access_iterator_tag		iterator_category;
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	//***ITERATOR TRAITS CONST SPECIALIZATION***/////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	template <typename T>
	struct iterator_traits<const T*> {
		typedef		ptrdiff_t						difference_type;
		typedef		T								value_type;
		typedef		const T*						pointer;
		typedef		const T&						reference;
		typedef		random_access_iterator_tag	iterator_category;
	};
	

}






#endif